---
- name: "Fail if UDS email has not been provided"
  assert:
    that: uds_contact.email is defined and uds_contact.email != ""
    fail_msg: "uds_contact.email property is required"

- name: "Fail if UDS first name has not been provided"
  assert:
    that: uds_contact.first_name is defined and uds_contact.first_name != ""
    fail_msg: "uds_contact.first_name property is required"

- name: "Fail if UDS email has not been provided"
  assert:
    that: uds_contact.last_name is defined and uds_contact.last_name != ""
    fail_msg: "uds_contact.last_name property is required"


# 1. Lookup the endpoint route
# -----------------------------------------------------------------------------
- name: Lookup UDS endpoint Route
  no_log: true
  k8s_info:
    api_version: v1
    kind: Route
    name: uds-endpoint
    namespace: "ibm-common-services"
  register: uds_endpoint

- name: "Fail if we didn't find the bas-endpoint route"
  assert:
    that: uds_endpoint.resources | length == 1
    fail_msg: "Failed looking up UDS endpoint route"


# 2. Lookup the UDS API key
# -----------------------------------------------------------------------------
- name: Lookup uds-api-key Secret
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: uds-api-key
    namespace: "ibm-common-services"
  register: uds_apikey_lookup

- name: "Fail if we didn't find the secret containing the UDS API key"
  assert:
    that: uds_apikey_lookup.resources | length == 1
    fail_msg: "Failed looking up secret containing UDS API key"


# 3. Lookup the segment key
# -----------------------------------------------------------------------------
# - name: Lookup UDS segment key Secret
#   no_log: true
#   k8s_info:
#     api_version: v1
#     kind: Secret
#     name: segment-key-secret
#     namespace: "ibm-common-services"
#   register: uds_segmentkey_lookup

# - name: "Fail if we didn't find the secret containing the UDS segment key"
#   assert:
#     that: uds_segmentkey_lookup.resources | length == 1
#     fail_msg: "Failed looking up secret containing UDS segment key"


# 4. Set the initial facts
# -----------------------------------------------------------------------------
- name: Set facts for BASCfg
  no_log: true
  set_fact:
    uds_api_key: "{{ uds_apikey_lookup.resources[0].data.apikey | b64decode }}"
    uds_endpoint_url: "https://{{uds_endpoint.resources[0].spec.host}}"


# 5. Lookup the certificates
# -----------------------------------------------------------------------------
# We don't know why but sometimes the name of the secret will be
# "router-certs-default" and sometimes it will be named after the domain of
# the cluster (e.g. fvtstable-6f1620198115433da1cac8216c06779b-0000)

# 5.1 First, attempt to get the router-certs-default secret
- name: Lookup Certificate for UDS (default)
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: router-certs-default
    namespace: openshift-ingress
  register: uds_certificate_lookup

# 5.2 If it does exist, then use it
- name: Generate router secret name from the cluster subdomain
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# 5.3 If it does not exist, then perform a second lookup for the custom secret
- name: Get cluster subdomain
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_subdomain

- name: Lookup Certificate for UDS (custom)
  when: uds_tls_crt is not defined
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*')  }}"
    namespace: openshift-ingress
  register: uds_certificate_lookup

# 5.4 If we have a lookup result (last step wasn't skipped) and we haven't already set the crt variable, then set it now
- name: Generate router secret name from the cluster subdomain
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
    - uds_tls_crt is not defined
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# 5.5 If bas_tls_crt is still unset, then we've failed
- name: "Fail if we can't find the secret containing the UDS certificates"
  assert:
    that: uds_tls_crt is defined
    fail_msg: "Failed looking up secret containing UDS certificates from the default or custom router certificates secret"


# 6. Write out the config to the local filesystem
# -----------------------------------------------------------------------------
- name: Copy BASCfg to filesytem
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  ansible.builtin.template:
    src: bascfg.yml.j2
    dest: "{{ mas_config_dir }}/bas-ibm-common-services.yml"
