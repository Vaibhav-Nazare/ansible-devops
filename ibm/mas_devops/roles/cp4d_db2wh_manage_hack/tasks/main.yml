---
# Should should be part of the manage operator, but is not so we have to do it
# as a seperate step in the install flow for now :(

# 1. Determine which version of CP4D we are working with
# -----------------------------------------------------------------------------
# - if cpd_version is set explicitly then we use that
# - if cpd-meta-ops namespace exists then we assume it's 3.5
# - otherwise we assume CPD v4

- name: Check for the presence of the CPDv4 services namespace
  when: cpd_version is not defined or cpd_version == ''
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: cpd-meta-ops
  register: cpd3_namespace_lookup

- name: Set cpd_version to cpd35 if we found the CP4D v3 namespace
  when:
    - cpd_version is not defined or cpd_version == ''
    - cpd3_namespace_lookup.resources is defined
    - cpd3_namespace_lookup.resources | length == 1
  set_fact:
    cpd_version: cpd35

- name: Default to cpd40 if we did not find the CP4D v3 namespace
  when: cpd_version is not defined or cpd_version == ''
  set_fact:
    cpd_version: cpd40

- debug:
    msg: "CPD Version ........................... {{ cpd_version }}"

# 2. Load version-specific variables
# -----------------------------------------------------------------------------
- name: Load variables
  include_vars: "vars/{{ cpd_version }}.yml"


# 3. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "CP4D meta namespace..................... {{ cpd_meta_namespace }}"
      - "Db2 pod namespace ...................... {{ db2wh_pod_namespace }}"
      - "Db2 instance name ...................... {{ db2wh_instance_name }}"
      - "Db2 database name ...................... {{ db2wh_dbname }}"
      - "Db2 database schema .................... {{ db2wh_schema }}"
      - "Db2 database user ...................... {{ db2wh_username }}"


# 4a. Determine Db2 instance ID from name - CP4D v3.5
# -----------------------------------------------------------------------------
# When we create the database instance, we save the instance ID in a config map
# named mas-automation-config-{{db2wh_instance_name}}.  We need this instance ID
# to access the engine pod.
- name: "[CP4D v3.5] Load DB2 Deployment ID from Config Map"
  when: cpd_version == 'cpd35'
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: "{{ cp4d_db_config_configmap_name }}-{{ db2wh_instance_name }}"
    namespace: "{{ cpd_meta_namespace }}"
  register: cp4d_db_config_info

- name: "[CP4D v3.5] Read the DB2 database ID for {{ db2wh_instance_name }} from DB config ConfigMap data"
  when: cpd_version == 'cpd35'
  set_fact:
    db2wh_instance_id: "db2wh-{{ cp4d_db_config_info.resources[0].data.db2wh_instance_id }}"


# 4b. Determine Db2 instance ID from name - CP4D v4.0
# -----------------------------------------------------------------------------
- name: "[CP4D v4] Set instance ID = instance name"
  when: cpd_version == 'cpd40'
  set_fact:
    db2wh_instance_id: "{{ db2wh_instance_name }}"


# 5. Determine which pod to run in
# -----------------------------------------------------------------------------
# TODO: We should do this locally, connecting to the Db2 instance using the route
# that we have created.  Execing into a container is considered bad practice in
# production environment, and we want this collection to be production friendly.
#
# However given that we want to get all of this moved into the manage operator
# ASAP, there is little point investing the effort to fix this in this collection,
# rather that effort should be put into migrating this code into the manage
# operator itself, so that this isn't even necessary!

- name: "Lookup db2 Pod"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ db2wh_pod_namespace }}"
    label_selectors:
      - type=engine
      - app={{ db2wh_instance_id }}
  register: db2wh_pod

- name: Configure facts
  set_fact:
    db2wh_pod_name: "{{ db2wh_pod.resources[0].metadata.name }}"

- name: "Debug information - Part 3"
  debug:
    msg:
      - "Pod name ........... {{ db2wh_pod_name }}"


# 6. Prepare database for use with Maximo TPAE
# -----------------------------------------------------------------------------
- name: Create setupdb script in local /tmp
  ansible.builtin.template:
    src: setupdb.sh.j2
    dest: /tmp/setupdb.sh
    mode: '777'

- name: Copy the setupdb script into the db2 pod
  shell: "oc cp /tmp/setupdb.sh {{ db2wh_pod_namespace }}/{{ db2wh_pod_name }}:/tmp/setupdb.sh"

# The log file will also be available inside the pod /tmp/setupdb.log
# The script will exit early if /tmp/setupdb_complete exists to avoid unnecessarily re-running
# the setup, however this file will be lost after pod restarts.
- name: Run setupdb to prepare Db2 for use with Maximo TPAE
  shell: oc exec -n {{db2wh_pod_namespace}} {{db2wh_pod_name}} -- su -lc '/tmp/setupdb.sh | tee /tmp/setupdb.log' db2inst1
  register: prepare_cmds_status

- name: "Database setup debug information"
  debug:
    msg:
      - "Result (stdout) ........................ {{ prepare_cmds_status.stdout }}"
      - "result (stderr) ........................ {{ prepare_cmds_status.stderr }}"
