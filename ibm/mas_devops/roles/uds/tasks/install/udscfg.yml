---
# Note that the gencfg/main.yml task will actually create the config file,
# this task is just prepping the variables for that one.

- name: "udscfg : Fail if UDS contact information has not been provided"
  assert:
    that:
      - uds_contact.email is defined and uds_contact.email != ""
      - uds_contact.first_name is defined and uds_contact.first_name != ""
      - uds_contact.last_name is defined and uds_contact.last_name != ""
    fail_msg: "uds_contact property is required"


# 1. Lookup the endpoint route
# -----------------------------------------------------------------------------
- name: "udscfg : Lookup UDS endpoint Route"
  k8s_info:
    api_version: v1
    kind: Route
    name: uds-endpoint
    namespace: "ibm-common-services"
  register: uds_endpoint

- name: "udscfg : Fail if we didn't find the uds-endpoint route"
  assert:
    that: uds_endpoint.resources | length == 1
    fail_msg: "Failed looking up UDS endpoint route"


# 2. Lookup the UDS API key
# -----------------------------------------------------------------------------
- name: "udscfg : Lookup uds-api-key Secret"
  k8s_info:
    api_version: v1
    kind: Secret
    name: uds-api-key
    namespace: "ibm-common-services"
  register: uds_apikey_lookup

- name: "udscfg : Fail if we didn't find the secret containing the UDS API key"
  assert:
    that: uds_apikey_lookup.resources | length == 1
    fail_msg: "Failed looking up secret containing UDS API key"


# 3. Set the initial facts
# -----------------------------------------------------------------------------
- name: "udscfg : Set facts for BASCfg"
  set_fact:
    uds_api_key: "{{ uds_apikey_lookup.resources[0].data.apikey | b64decode }}"
    uds_endpoint_url: "https://{{uds_endpoint.resources[0].spec.host}}"


# 4. Lookup the certificates
# -----------------------------------------------------------------------------
# We don't know why but sometimes the name of the secret will be
# "router-certs-default" and sometimes it will be named after the domain of
# the cluster (e.g. fvtstable-6f1620198115433da1cac8216c06779b-0000)

# 4.1 First, attempt to get the router-certs-default secret
- name: "udscfg : Lookup Certificate for UDS (default)"
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: router-certs-default
    namespace: openshift-ingress
  register: uds_certificate_lookup

# 4.2 If it does exist, then use it
- name: "udscfg : Generate router secret name from the cluster subdomain"
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# 4.3 If it does not exist, then perform a second lookup for the custom secret
- name: "udscfg : Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_subdomain

- name: "udscfg : Lookup Certificate for UDS (custom)"
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*')  }}"
    namespace: openshift-ingress
  register: uds_certificate_lookup

- name: "udscfg : Debug cert lookup result"
  debug:
    msg:
      - "UDS Certificate Lookup ................. {{ uds_certificate_lookup }}"

# 4.4 If it does exist, then use it
- name: "udscfg : Generate router secret name from the cluster subdomain"
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

- name: "udscfg : Lookup Certificate for UDS (ROSA)"
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ cluster_name }}-primary-cert-bundle-secret"
    namespace: openshift-ingress
  register: uds_certificate_lookup

# 4.5 If we have a lookup result (last step wasn't skipped) and we haven't already set the crt variable, then set it now
- name: "udscfg : Generate router secret name from the cluster subdomain"
  when:
    - uds_certificate_lookup.resources is defined
    - uds_certificate_lookup.resources | length == 1
  set_fact:
    uds_tls_crt: "{{ uds_certificate_lookup.resources[0].data['tls.crt'] | b64decode | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# 4.6 If uds_tls_crt is still unset, then we've failed
- name: "udscfg : Fail if we can't find the secret containing the UDS certificates"
  assert:
    that: uds_tls_crt is defined
    fail_msg: "Failed looking up secret containing UDS certificates from the default or custom router certificates secret"


# 5 Debug
# -----------------------------------------------------------------------------
- name: "udscfg : Debug generated config"
  debug:
    msg:
      - "UDS URL ............................ {{ uds_endpoint_url }}"
      - "UDS TLS Certificate ................ {{ uds_tls_crt }}"
      - "UDS Contact First Name ............. {{ uds_contact.first_name | default('<undefined>', True) }}"
      - "UDS Contact Last Name .............. {{ uds_contact.last_name | default('<undefined>', True) }}"
      - "UDS Contact e-mail ................. {{ uds_contact.email | default('<undefined>', True) }}"
