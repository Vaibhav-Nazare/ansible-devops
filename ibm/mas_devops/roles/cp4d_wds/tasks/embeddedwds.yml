---
# 1. Check if CP4D is installed and fail if not there
# -----------------------------------------------------------------------------
- name: "embeddedwds: Check if cp4d instance is there"
  community.kubernetes.k8s_info:
    api_version: cpd.ibm.com/v1
    kind: Ibmcpd
  register: cp4dalllist

- name: "Fail if no cp4d instance is provided before discovery install"
  assert:
    that:
      - cp4dalllist.resources| length > 0
    fail_msg: "CP4D Base is required to WDS install and instance provision"

# 2. Query the existing CP4D used project, Storage Class
# -----------------------------------------------------------------------------
- name: "embeddedwds: cp4d cluster status and query the project and Storage Class used by CP4D"
  when: cp4dalllist.resources| length != 0
  set_fact:
    cpdavailable: '{% if cp4dalllist.resources[0].status.controlPlaneStatus == "Completed" %}True{% else %}False{% endif %}'
    cpdnamespace: "{{ cp4dalllist.resources[0].metadata.namespace }}"
    cpdstorageclass: "{{ cp4dalllist.resources[0].spec.zenCoreMetadbStorageClass is defined | ternary(cp4dalllist.resources[0].spec.zenCoreMetadbStorageClass,wdsstorageclass) }}"

- name: "embeddedwds: Print the storage class used by discovery install"
  debug:
    msg:
      - "Project for Discovery install .......... {{ cpdnamespace }}"
      - "Storage Class used by Discovery ........ {{ cpdstorageclass }}"

# 3. Check and see if we need to Query the existing CP4D admin login crdential
# -----------------------------------------------------------------------------
- name: "embeddedwds: Decide if external discovery service will be used"
  when:
    - cp4d_username is defined and cp4d_username != ""
    - cp4d_password is defined and cp4d_password != ""
  set_fact:
    useprovidedcp4dcredential: true
    wds_admin_username: "{{ cp4d_username }}"
    wds_admin_password: "{{ cp4d_password }}"

- name: "embeddedwds: check if the cp4d admin user secret exist"
  when:
    - cpdavailable is defined and cpdavailable
    - not ( useprovidedcp4dcredential is defined and useprovidedcp4dcredential )
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: "admin-user-details"
    namespace: "{{ cpdnamespace }}"
  register: cpdadmincred

- name: "embeddedwds: Query the existing cp4d instance Login Credential"
  when:
    - cpdavailable is defined and cpdavailable
    - not ( useprovidedcp4dcredential is defined and useprovidedcp4dcredential )
    - cpdadmincred.resources| length != 0
  set_fact:
    wds_admin_username: "admin"
    wds_admin_password: "{{ cpdadmincred.resources[0]['data']['initial_admin_password'] | b64decode }}"

# 4. Query if there's existing Discovery CR instance
# -----------------------------------------------------------------------------

- name: "embeddedwds: Check if cpd platform and foundational service operator is there "
  when: cpdavailable is defined and cpdavailable
  community.kubernetes.k8s_info:
    api_version: operator.ibm.com/v1alpha1
    kind: OperandRequest
    name: "zen-service"
    namespace: "{{ cpdnamespace }}"
  register: cp4doperandrequest

- name: "embeddedwds: Query CP4D instance namespace"
  when:
    - cpdavailable is defined and cpdavailable
    - cp4doperandrequest.resources| length != 0
  set_fact:
    cpdopsnamespace: "{{ cp4doperandrequest.resources[0].spec.requests[0].registryNamespace }}"

- name: "embeddedwds: Check if Discovery instance is there in the same project"
  community.kubernetes.k8s_info:
    api_version: discovery.watson.ibm.com/v1
    name: wd
    namespace: "{{ cpdnamespace }}"
    kind: WatsonDiscovery
  register: wdsinstance_info

# 5. Install edb Operator as it's pre-condition for Discovery install
# -----------------------------------------------------------------------------
- name: "embeddedwds: Find if subscription for edb exist"
  when:
    - cpdavailable is defined and cpdavailable
    - wdsinstance_info.resources | length == 0
  block:
    - name: Get the sub info from CP4D instance namespace
      community.kubernetes.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        namespace: "{{ cpdopsnamespace }}"
      register: cp4d_subs
    - name: "embeddedwds: Find sub info for CP4D edb operator"
      set_fact:
        edbavailable: true
      with_items: "{{ cp4d_subs.resources }}"
      when: item.spec.name == 'cloud-native-postgresql' or item.spec.name == 'ibm-cpd-edb'
    - name: Print EDB namespace info if it's found
      when: edbavailable is defined and edbavailable
      debug:
        msg:
          - "EDB Available ...................... {{ edbavailable }}"
          - "EDB Namespace....................... {{ cpdopsnamespace }}"
    - name: "cp4d/wds : Create CP4D EDB subscription"
      when: not ( edbavailable is defined and edbavailable )
      community.kubernetes.k8s:
        apply: yes
        definition: "{{ lookup('template', 'templates/edbsub.yml.j2') }}"
        namespace: "{{ cpdopsnamespace }}"
    - name: "Wait until the EDB CRD is available"
      when: not ( edbavailable is defined and edbavailable )
      community.kubernetes.k8s_info:
        api_version: apiextensions.k8s.io/v1
        name: "clusters.postgresql.k8s.enterprisedb.io"
        kind: CustomResourceDefinition
        wait: yes
        wait_sleep: 10
        wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
        wait_condition:
          type: NamesAccepted
          status: "True"
      register: edb_crd_info
      retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
      delay: 5 # seconds
      until:
        - edb_crd_info.resources is defined
        - edb_crd_info.resources | length > 0

# 6. Create CP4D WDS Operator(Subscription)
# -----------------------------------------------------------------------------
- name: "cp4d/wds : Create CP4D WDS subscription"
  when:
    - cpdavailable is defined and cpdavailable
    - edbavailable is defined and edbavailable
    - wdsinstance_info.resources | length == 0
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/subscription.yml.j2') }}"
    namespace: "{{ cpdopsnamespace }}"

- name: "Wait until the WDS CRD is available"
  when:
    - cpdavailable is defined and cpdavailable
    - edbavailable is defined and edbavailable
    - wdsinstance_info.resources | length == 0
  community.kubernetes.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "watsondiscoveries.discovery.watson.ibm.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: wds_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - wds_crd_info.resources is defined
    - wds_crd_info.resources | length > 0

# 7. Create CP4D WDS CR instance and Wait for it's up running
# -----------------------------------------------------------------------------
- name: "cp4d/wds : Create CP4D WDS instance"
  when:
    - cpdavailable is defined and cpdavailable
    - edbavailable is defined and edbavailable
    - wdsinstance_info.resources | length == 0
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cr.yml.j2') }}"

# Wait for the cluster to be ready
- name: "cp4d/wds : Wait for WDS instance to be ready (5m delay)"
  when:
    - cpdavailable is defined and cpdavailable
    - edbavailable is defined and edbavailable
    - wdsinstance_info.resources | length == 0
  community.kubernetes.k8s_info:
    api_version: discovery.watson.ibm.com/v1
    name: wd
    namespace: "{{ cpdnamespace }}"
    kind: WatsonDiscovery
  register: wds_cluster_lookup
  until:
    - wds_cluster_lookup.resources | length == 1
    - wds_cluster_lookup.resources[0].status.watsonDiscoveryStatus == "Completed"
  retries: 24 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes

# 8. Authorize the CP4D admin user nad get Bearer token for API use
# -----------------------------------------------------------------------------
- name: "embeddedwds: Find cp4d route info"
  when: cpdavailable is defined and cpdavailable
  block:
    - name: "embeddedwds: Get the CP4D Route info from OpenShift"
      community.kubernetes.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ cpdnamespace }}"
      register: cp4d_routes
    - name: "embeddedwds: Find route info for CP4D "
      set_fact:
        cp4dhost: "{{ item.spec.host }}"
      with_items: "{{ cp4d_routes.resources }}"
      when: item.spec.to.name is defined and item.spec.to.name =='ibm-nginx-svc'
    - name: Get the CP4D host from Route info and set as cp4d_host
      set_fact:
        cp4d_host_url: "https://{{ cp4dhost }}"

- name: "embeddedwds: Authorize the CP4D (get Bearer token)"
  when: cpdavailable is defined and cpdavailable
  uri:
    url: "{{ cp4d_host_url }}/icp4d-api/v1/authorize"
    validate_certs: no
    method: POST
    headers:
      cache-control: "no-cache"
    body_format: "json"
    body: "{\"username\":\"{{ wds_admin_username }}\",\"password\":\"{{ wds_admin_password }}\"}"
    status_code: 200
    timeout: 30
  register: cp4d_authorization_info

- name: "embeddedwds: Get the CP4D Bearer token"
  when: cpdavailable is defined and cpdavailable
  set_fact:
    wds_bearer_token: "{{ cp4d_authorization_info.json.token }}"

# 9. Check the existing Discovery instance UUID
# -----------------------------------------------------------------------------
- name: "embeddedwds: find if the WDS instance is already there"
  set_fact:
    wds_instname: "discovery-assist"

- name: "embeddedwds: find if the WDS instance is already there"
  set_fact:
    wds_instname: "discovery-assist-{{ mas_workspace_id }}"
  when: mas_workspace_id is defined and mas_workspace_id != ""

- name: "embeddedwds: Print the Discovery Instance Name"
  debug:
    msg:
      - "Discovery Instance Name.......... {{ wds_instname }}"

- name: "embeddedwds:Check if there's existing Discovery instance in CP4D"
  when: wds_bearer_token is defined
  uri:
    url: "{{ cp4d_host_url }}/zen-data/v3/service_instances?fetch_all_instances=false&limit=9223372036854775807&offset=0"
    validate_certs: no
    method: GET
    headers:
      Authorization: "Bearer {{ wds_bearer_token }}"
      cache-control: "no-cache"
    status_code: 200,412
    timeout: 30
  register: query_instance_output

- name: "embeddedwds: find the WDS instance and query the wds uuid"
  set_fact:
    wds_number: "{{ item.id | int}}"
    findwdsinst: true
  with_items: "{{ query_instance_output.json.service_instances }}"
  when:
    - query_instance_output.status is defined and query_instance_output.status|int == 200
    - item.addon_type == "discovery"
    - item.display_name == wds_instname


# 10. Provision the CP4D WDS instance and get its uuid
# -----------------------------------------------------------------------------
- name: "embeddedwds: Create the WDS instance in CP4D when WDS instance not exist and query its uuid"
  when: not ( findwdsinst is defined and findwdsinst )
  block:
    - name: create new WDS instance
      uri:
        url: "{{ cp4d_host_url }}/watson/common/discovery/api/ibmcloud/resource-controller/resource_instances"
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ wds_bearer_token }}"
          cache-control: "no-cache"
        body_format: "json"
        body: "{{ lookup('template','templates/wds.json.j2') }}"
        status_code: 200,412
        timeout: 30
      register: create_wds_output
    - debug:
        msg: "discovery instance ID.............. {{ create_wds_output.json.id }}"
      when: create_wds_output.status|int == 200
    - name: "embeddedwds: Get the CP4D instance uuid number"
      when: create_wds_output.status|int == 200
      set_fact:
        wds_number: "{{ create_wds_output.json.id | replace('-','')|int }}"

# 11. Print Out the Discovery instance URL and crdential for use
# -----------------------------------------------------------------------------
- name: "embeddedwds: Set and Print out Discovery instance info"
  block:
    - name: Get the CP4D instance url
      set_fact:
        wds_url: "{{ cp4d_host_url}}/discovery/{{ cpdnamespace }}-wd/instances/{{ wds_number }}/api"
    - name: Print the WDS related info
      debug:
        msg:
          - "WDS url ............................ {{ wds_url }}"
          - "WDS Admin .......................... {{ wds_admin_username }}"
  rescue:
    - name: Fail as we didn't get the WDS instance here or CP4D is not installed.
      fail:
        msg: "We Couldn't get the WDS instance here or CP4D is not installed"
