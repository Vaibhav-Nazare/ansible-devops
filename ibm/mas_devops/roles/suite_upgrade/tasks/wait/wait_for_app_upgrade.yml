---
- name: 'Wait until all apps are upgraded'
  block:
    - name: "wait : Set the retry count"
      set_fact:
        app_retry_count: "{{ 0 if app_retry_count is undefined else app_retry_count|int + 1 }}"
        apps_count: 0
        ready_apps_count: 0

    - name: "wait : Lookup apps CRs"
      vars:
        app_name: "{{ item }}"
      kubernetes.core.k8s_info:
        api_version: "{{ hostvars[inventory_hostname][item].apiVersion }}"
        kind: "{{ hostvars[inventory_hostname][item].crdkind }}"
        name: "{{ mas_instance_id }}"
        namespace: "mas-{{ mas_instance_id }}-{{ item }}"
      register: app_cr_lookup
      until:
        - app_cr_lookup.resources is defined
        - app_cr_lookup.resources | length > 0
      with_items: "{{ mas_apps }}"

    # - debug:
    #     msg: "{{ app_cr_lookup}}"

    - name: "wait : Check if apps operators have been upgraded"
      set_fact:
        apps_count: "{{ apps_count|int + 1 }}"
        ready_apps_count: "{{ ready_apps_count|int + 1 if (
          item.resources is defined
          and item.resources | json_query('[*].status.conditions[?type==`Running`][].reason') | select ('match','Successful') | list | length == 1
          and item.resources | json_query('[*].status.conditions[?type==`Failure`][].status') | select ('match','False') | list | length == 1
          and item.resources | json_query('[*].status.conditions[?type==`Ready`][].reason') | select ('match','Ready') | list | length == 1)
          else ready_apps_count|int}}"
      with_items: "{{ app_cr_lookup.results }}"
      loop_control:
        label:
          - "{{ item.resources[0].kind }} CR status = {{ 'Application operator upgraded!' if (
            item.resources is defined and item.resources | json_query('[*].status.conditions[?type==`Running`][].reason') | select ('match','Successful') | list | length == 1
            and item.resources | json_query('[*].status.conditions[?type==`Failure`][].status') | select ('match','False') | list | length == 1
            and item.resources | json_query('[*].status.conditions[?type==`Ready`][].reason') | select ('match','Ready') | list | length == 1)
            else 'Application upgrade pending...' }} Current operator version: {{ item.resources[0].status.versions.reconciled if (item.resources[0].status.versions is defined) else item.resources[0].status.version.reconciled }}" #this hack is needed so it doesnt break on PredictApp which is using `status.version` (unlike all other apps)
          - "{{ (item.resources | json_query('[*].status.conditions[?type==`Ready`][].reason')) }} - {{ (item.resources | json_query('[*].status.conditions[?type==`Ready`][].message')) }}"
          - "{{ 'Error! Something wrong while upgrading this app, check its CR for more details...' if (item.resources | json_query('[*].status.conditions[?type==`Failure`][].reason') | select ('match','Failed') | list | length == 1) }}"

    - name: "wait : Fail if one or more apps operators are pending to upgrade..."
      assert:
        that: ready_apps_count == apps_count
        fail_msg: "[{{ app_retry_count }}/60] {{ ready_apps_count }} of {{ apps_count }} apps are upgraded"

    # reset retry count when all apps are upgraded
    - set_fact:
        retry_apps_count: 0
      when: ready_apps_count == apps_count
  rescue:
    - name: "wait : Give up after 60 attempts (approx 1 hour)"
      assert:
        that: app_retry_count | int < 60
        fail_msg: Timed out waiting for app operator to be ready

    - name: "wait : Wait for 1 minute before checking again"
      pause:
        minutes: 1

    - include_tasks: "{{ role_path }}/tasks/wait/wait_for_app_upgrade.yml"
