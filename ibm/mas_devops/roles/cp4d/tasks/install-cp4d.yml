---

# 1. Create CloudPak for Data CR
# -----------------------------------------------------------------------------
# https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=installing-cloud-pak-data

- name: "Install CloudPak for Data"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/ibmcpd.yml.j2'


# 2. Patch ZenService lite-cr to scaleConfig: medium
# ----------------------------------------------------------------------------------------------
# 2.1 Wait for Zen operator ...
- name: "Wait for ibm-zen-operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: ibm-zen-operator
    namespace: ibm-common-services
    kind: Deployment
  register: zen_operator_lookup
  until: zen_operator_lookup.resources[0].status.availableReplicas is defined
  retries: 20 # Approximately 20 minutes before we give up
  delay: 60 # 1 minute

# 2.2 Wait for lite-cr to be created ...
- name: "Wait for ZenService lite-cr to be created"
  kubernetes.core.k8s_info:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_instance_namespace }}"
    kind: ZenService
  register: zenlitecr_output
  until:
    - zenlitecr_output.resources is defined
    - zenlitecr_output.resources | length > 0
  retries: 20 # approx 20 minutes before we give up
  delay: 60 # 1 minute

# 2.3 Apply the patch per recommendation from CP4D team
- name: "Patch ZenService lite-cr to scaleConfig: medium"
  kubernetes.core.k8s:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_instance_namespace }}"
    kind: ZenService
    definition:
      spec:
        scaleConfig: medium
        ZenCoreMetaDb:
          name: zen-metastoredb
          kind: StatefulSet
          container: zen-metastoredb
          replicas: 3
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 200m
              memory: 1024Mi
    apply: true


# 3. Wait for controlPlaneStatus
# -----------------------------------------------------------------------------
# oc get Ibmcpd ibmcpd-cr -o jsonpath="{.status.controlPlaneStatus}{'\n'}"
- name: "Wait for controlPlaneStatus to be 'Completed' (60s delay)"
  kubernetes.core.k8s_info:
    api_version: cpd.ibm.com/v1
    name: ibmcpd
    namespace: "{{ cpd_instance_namespace }}"
    kind: Ibmcpd
  register: ibmcpd_lookup
  until:
    - ibmcpd_lookup.resources[0].status.controlPlaneStatus is defined
    - ibmcpd_lookup.resources[0].status.controlPlaneStatus == "Completed" or ibmcpd_lookup.resources[0].status.controlPlaneStatus == "Failed"
  retries: 60 # Approximately 2 hours before we give up
  delay: 120 # 2 minutes

- name: "Check that the controlPlaneStatus is 'Completed'"
  assert:
    that: ibmcpd_lookup.resources[0].status.controlPlaneStatus == "Completed"
    fail_msg: "IBM CloudPak for Data install failed (controlPlaneStatus)"


# 4. Wait for zenStatus
# -----------------------------------------------------------------------------
# oc get ZenService lite-cr -o jsonpath="{.status.zenStatus}{'\n'}"
- name: "Wait for zenStatus to be ready to be 'Completed' (60s delay)"
  kubernetes.core.k8s_info:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_instance_namespace }}"
    kind: ZenService
  register: zenservice_lookup
  until:
    - zenservice_lookup.resources[0].status.zenStatus is defined
    - zenservice_lookup.resources[0].status.zenStatus == "Completed" or zenservice_lookup.resources[0].status.zenStatus == "Failed"
  retries: 25 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes

- name: "Check that the zenStatus is 'Completed'"
  assert:
    that: zenservice_lookup.resources[0].status.zenStatus == "Completed"
    fail_msg: "IBM CloudPak for Data install failed (zenStatus)"


# 5. Provide CP4D dashboard URL
# -----------------------------------------------------------------------------
- name: "Obtain CP4D dashboard URL"
  debug:
    msg:
      - "CP4D Dashboard ......................... https://{{zenservice_lookup.resources[0].status.url}}"
      - "CP4D Username .......................... admin"
      - "CP4D Password .......................... Found in 'admin-user-details' secret under '{{ cpd_instance_namespace }}' namespace"
