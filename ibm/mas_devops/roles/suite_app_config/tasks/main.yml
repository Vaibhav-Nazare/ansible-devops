---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if required properties are not provided"
  assert:
    that:
      - mas_instance_id is defined and mas_instance_id != ""
      - mas_app_id is defined and mas_app_id != ""
      - mas_workspace_id is defined and mas_workspace_id != ""
    fail_msg: "Missing one or more required properties"


# 2. Load var files
# -----------------------------------------------------------------------------
- name: Load variables
  include_vars: "vars/{{ mas_app_id }}.yml"

# 2.1 Load default application workspace spec, if user does not provide one
# -----------------------------------------------------------------------------
- name: Load default application workspace spec
  when: mas_app_ws_spec is not defined or mas_app_ws_spec == ""
  include_vars: "vars/defaultspecs/{{ mas_app_id }}.yml"

# 3. Provide debug information
# -----------------------------------------------------------------------------
- name: "Configure namespace"
  set_fact:
    mas_namespace: "mas-{{ mas_instance_id }}-core"
    mas_app_namespace: "mas-{{ mas_instance_id }}-{{ mas_app_id }}"

- name: "Debug information"
  debug:
    msg:
      - "Instance ID ............... {{ mas_instance_id }}"
      - "Application ID ............ {{ mas_app_id }}"
      - "Workspace ID .............. {{ mas_workspace_id }}"
      - "MAS app namespace ......... {{ mas_app_namespace }}"
      - "Templated workspace CR .... {{ lookup('template', 'templates/workspace.yml.j2') }}"

# 4. Workspace configuration
# -----------------------------------------------------------------------------
- name: Configure application in workspace
  kubernetes.core.k8s:
    state: present
    namespace: "{{ mas_app_namespace }}"
    definition: "{{ lookup('template', 'templates/workspace.yml.j2') }}"


# 5. Wait for application workspace to be ready
# -----------------------------------------------------------------------------
- name: "Wait for application workspace to be ready ({{ mas_app_cfg_delay }}s delay)"
  kubernetes.core.k8s_info:
    api_version: "{{ mas_app_ws_apiversion }}"
    kind: "{{ mas_app_ws_kind }}"
    name: "{{ mas_instance_id }}-{{ mas_workspace_id }}"
    namespace: "{{ mas_app_namespace }}"
    wait: yes
    wait_condition:
      status: "True"
      type: Ready
    wait_sleep: 30
    wait_timeout: 120 # before we give up and fall back into the retry loop
  register: app_ws_cr_result
  retries: "{{ mas_app_cfg_retries }}"
  delay: "{{ mas_app_cfg_delay }}"
  until:
    - app_ws_cr_result.resources is defined
    - app_ws_cr_result.resources | length > 0
    - app_ws_cr_result.resources | json_query('[*].status.conditions[?type==`Ready`][].status') | select ('match','True') | list | length == 1
