---
# 1. Lookup the application CR
- name: "Get installed version of {{ app_check_id }}"
  kubernetes.core.k8s_info:
    api_version: "{{ app_api_version }}"
    name: "{{ mas_instance_id }}"
    namespace: "mas-{{ mas_instance_id }}-{{ app_check_id }}"
    kind: "{{ app_check_kind }}"
  register: app_info

- debug:
    msg: "{{ app_info.msg }}"
  when: app_info.msg is defined

# 2. If the application is installed, check whether it's running at a supported version
# 2a. Most apps have `status.versions.reconciced` in its CR
- name: "Assert that {{app_check_id }} is running a supported version to upgrade to MAS 8.7"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
    - app_info.resources[0].status.versions.reconciled is defined
    - app_info.resources[0].status.versions.reconciled | length > 0
  assert:
    that:
      - app_info.resources[0].status.versions.reconciled is version(app_check_min_version, '>=')
      - app_info.resources[0].status.versions.reconciled is version(app_check_max_version, '<')
    fail_msg: "Installed {{ app_check_id }} application is not in the supported range for MAS 8.7.x [ >={{ app_check_min_version }}, <{{ app_check_max_version }} ], current version: {{ app_info.resources[0].status.versions.reconciled }} "

# 2b. Apps like predict have `status.version.reconciced` in its CR
- name: "Assert that {{app_check_id }} is running a supported version to upgrade to MAS 8.7"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
    - app_info.resources[0].status.version.reconciled is defined
    - app_info.resources[0].status.version.reconciled | length > 0
  assert:
    that:
      - app_info.resources[0].status.version.reconciled is version(app_check_min_version, '>=')
      - app_info.resources[0].status.version.reconciled is version(app_check_max_version, '<')
    fail_msg: "Installed {{ app_check_id }} application is not in the supported range for MAS 8.7.x [ >={{ app_check_min_version }}, <{{ app_check_max_version }} ], current version: {{ app_info.resources[0].status.version.reconciled }} "

# 3. Check if application is healthy to upgrade
- name: "Assert that {{app_check_id }} is in healthy state to upgrade to MAS 8.7.x"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
  assert:
    that:
      - app_info.resources | json_query('[*].status.conditions[?type==`Running`][].reason') | select ('match','Successful') | list | length == 1
      - app_info.resources | json_query('[*].status.conditions[?type==`Ready`][].reason') | select ('match','Ready') | list | length == 1
    fail_msg: "Installed {{ app_check_id }} application is not in healthy state to upgrade to MAS 8.7.x. Check its CR status for more details!"
    success_msg: "Installed {{ app_check_id }} application is in healthy state to upgrade to MAS 8.7.x!"

- name: "Get subscription channel of {{ app_check_id }}"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: "ibm-mas-{{ app_check_id }}"
    namespace: "mas-{{ mas_instance_id }}-{{ app_check_id }}"
    kind: Subscription
  register: app_sub_info

- name: "Assert that the subscription for {{ app_check_id }} exists"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
  assert:
    that:
      - app_sub_info.resources is defined
      - app_sub_info.resources | length == 1
    fail_msg: "Existing subscription for {{ app_check_id }} in mas-{{ mas_instance_id }}-{{ app_check_id }} could not be found"

- name: "Assert that the subscription for the suite is on a channel we can upgrade from"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
  assert:
    that:
      - app_sub_info.resources[0].spec.channel is in mas_app_upgrade_supported_channels[app_check_id]
    fail_msg: "Existing subscription for MAS Core ({{ app_sub_info.resources[0].spec.channel }}) is not on a supported channel ({{ mas_app_upgrade_supported_channels[app_check_id] }})"

- name: "Assert that automatic upgrades are enabled as that is all we support atm"
  when:
    - app_info.resources is defined
    - app_info.resources | length == 1
  assert:
    that:
      - app_sub_info.resources[0].spec.installPlanApproval == 'Automatic'
    fail_msg: "Install plan approval for MAS Core subscription is not set to Automatic, this role does not support Manual upgrade approvals (yet)"
