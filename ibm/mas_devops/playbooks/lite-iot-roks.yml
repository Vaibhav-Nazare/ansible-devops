---
- hosts: localhost
  any_errors_fatal: true

# 1. Deploy & configure the cluster
# -----------------------------------------------------------------------------
- name: Deploy ROKS cluster in IBM Cloud
  import_playbook: ocp/provision-roks.yml

- name: Login & configure OCP cluster
  import_playbook: ocp/configure-ocp.yml
  vars:
    cluster_type: roks
    prometheus_storage_class: ibmc-block-gold
    prometheus_alertmgr_storage_class: ibmc-file-gold-gid


# 2. Default Cluster Secret Hack for CP4D
# -----------------------------------------------------------------------------
# Note: We will perform this hack even when installing cp4d v3, for which it's
# not technically necessary, but it does not harm other than adding some time to
# the overall playbook run.  The extra complexity of deciding when to run this
# is not worth the overhead for this sample end-to-end playbook.
#
# We hope to find out how to avoid doing this entirely in the new year, as it
# shouldn't be a requirement to restart worker nodes and modify the default image
# pull secret to use any containerized software.
- name: Update default cluster pull secret and reboot all worker nodes
  import_playbook: cp4d/hack-worker-nodes.yml
  vars:
    cluster_type: roks


# 3. Install MongoDb
# -----------------------------------------------------------------------------
- name: Install MongoDb (Community Edition)
  import_playbook: dependencies/install-mongodb-ce.yml
  vars:
    mongodb_storage_class: ibmc-block-gold


# 4. Install AMQ Streams
# -----------------------------------------------------------------------------
- name: Install AMQ Streams (Apache Kafka)
  import_playbook: dependencies/install-amqstreams.yml
  vars:
    kafka_storage_class: ibmc-block-gold


# 5. Install Db2 CP4D service
# -----------------------------------------------------------------------------
- name: Install CP4D services
  import_playbook: cp4d/install-services-db2.yml
  vars:
    mas_channel: "{{ lookup('env', 'MAS_CHANNEL') | default('8.x', True) }}" #  when defined, it will automatically install a cpd version that is compatible with the chosen mas_channel
    cpd_storage_class: ibmc-file-gold-gid

# 6. Install SLS
# -----------------------------------------------------------------------------
- name: Install SLS
  import_playbook: dependencies/install-sls.yml
  vars:
    sls_storage_class: ibmc-file-gold-gid
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"

    # Use the generated mongodb configuration
    mongodb_namespace: "{{ lookup('env', 'MONGODB_NAMESPACE') | default('mongoce', True) }}"
    mongodb_cfg_file: "{{ mas_config_dir }}/mongo-{{ mongodb_namespace }}.yml"


# 7. Install BAS
# -----------------------------------------------------------------------------
- name: Install BAS
  import_playbook: dependencies/install-bas.yml
  vars:
    bas_persistent_storage_class: "ibmc-file-bronze-gid"
    bas_meta_storage_class: "ibmc-block-bronze"


# 8. Create DB2 Warehouse instance for IoT (system scope)
# -----------------------------------------------------------------------------
- name: Install CP4D services & configure Db2
  import_playbook: cp4d/create-db2-instance.yml
  vars:
    db2wh_instance_name: db2w-shared
    db2wh_meta_storage_class: ibmc-file-silver-gid
    db2wh_user_storage_class: ibmc-file-gold-gid
    db2wh_backup_storage_class: ibmc-file-gold-gid
    db2wh_logs_storage_class: ibmc-file-silver-gid # only applicable for cp4d 4.0
    db2wh_temp_storage_class: ibmc-file-silver-gid # only applicable for cp4d 4.0
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"
    mas_config_scope: system


# 9. Install & configure MAS
# -----------------------------------------------------------------------------
- name: Install & configure MAS
  import_playbook: mas/install-suite.yml
  vars:
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"


# 10. Install & Configure IoT application
# -----------------------------------------------------------------------------
- name: Install & configure IoT
  import_playbook: mas/install-app.yml
  vars:
    mas_app_id: iot

# Note that this sample playbook is always assuming a workspace ID of masdev,
# this can easily be modified when creating your own playbooks.
- name: Configure IoT
  import_playbook: mas/configure-app.yml
  vars:
    mas_app_id: iot
    mas_workspace_id: masdev
